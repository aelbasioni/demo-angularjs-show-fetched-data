{"version":3,"sources":["app.js"],"names":["chartColors","lineOptions","scaleShowGridLines","scaleGridLineColor","scaleGridLineWidth","bezierCurve","bezierCurveTension","title","text","pointDotStrokeWidth","pointHitDetectionRadius","constant","factory","datasetFill","responsive","display","JSON_FILE_URL","url","serviceBasePath","SQLITE_DATABASE_URL","data","window","location","origin","defer","response","$http","$q","fac","controller","pricesService","$scope","inprocessing","cheeseData","dataStatus","then","resolve","error","getCheesePrices","years","names","prices","errDivContainer","document","getElementById","lineData","ctx","lineChart","classList","cheese_data","length","_generateChartDataset","labels","datasets","item","label","i","name","strokeColor","pointHighlightFill","pointHighlightStroke","innerHTML","dataSet","push","getContext","Chart","Line","generateLegend","pointColor","price_data","innerText","ExceptionMessage","remove"],"mappings":"aAGA,IAAMA,YAAc,CAChB,oBADEA,oBAGF,oBAgBJ,oBAdI,oBACA,qBAgBEC,qBACF,oBACAC,mBACA,mBACAC,kBACA,mBACAC,mBACA,qBAQAH,YAAA,CAEAC,oBAAA,EAEAC,mBAAA,kBAEAC,mBAAA,EAEAC,aAAA,EAEAC,mBAAA,GAEAC,UAAO,EAEHC,eAAM,EAbVC,oBAAqB,EAErBC,wBAAyB,GAmBzBC,eAAS,EAETC,mBAAQ,EAfRC,aAAa,EAEbC,YAAY,EACZP,MAAO,CACHQ,SAAS,EAkBPC,KAAAA,uBAOEC,IAAAA,QAAKC,OAAAA,UAAkBC,IACvBC,IAAAA,SAAAA,kBAAMC,OAAAC,SAAAC,QAENC,IAAAA,QAAAA,gBAAcC,CAAAA,QAAd,KAAA,kBAAA,SAAAC,EAAAC,EAAAT,GACH,IANDU,EAMG,GAyBC,OAhBRC,EAAAA,gBAAW,WAhBP,IAAML,EAAQG,EAAGH,QA6BjBM,OAXJC,EAAOC,CACAC,OAAAA,MACAC,IAAAA,EA/BX,4BAeYd,KAAM,KAoBde,KAAA,SAAAV,GAlBQD,EAAMY,QAAQX,EAASL,OACxB,SAACiB,GAoBDC,EAAAA,OAAAA,KAEHR,EAAAA,SAGIF,KAGQG,IAAAA,WAAAA,iBAAOG,CAAAA,SAAP,gBAAA,SAAAH,EAAAD,GAEAC,EAAAA,cAAAA,EACHA,EAAAE,WAAM,CAAAM,MAAA,GAAAC,MAAA,GAAAC,OAAA,IACHV,EAAAA,WAAAA,cAZhBA,EAAOO,gBAAmB,WAqBlBP,EAAAG,WAAA,cACAJ,EAAMY,kBAAkBC,KAASC,SAAAA,GAkCzC,IAEUC,EAOAC,EACAC,EAzCFL,GAAAA,EAAgBM,cAvBpBjB,EAAAE,WAAAM,MAAAnB,EAAA6B,YAAAV,MAFJR,EAAAE,WAAAM,OAAA,EAAAR,EAAAE,WAAAM,MAAAW,QAQgBnB,EAAOG,WAAa,GAuBpCH,EAAAE,WAAAO,MAAApB,EAAA6B,YAAAT,MArBgBT,EAAOE,WAAWQ,OAASrB,EAAK6B,YAAYR,QAwBnDU,EAAAA,WAAwB,qBAwBvBN,EAAW,CACbO,OAAQrB,EAAOE,WAAWM,MAC1Bc,SAHJ,WAGIA,IAFJ,IAAMR,EAAW,GACbO,EAAenB,EAAAA,WADFQ,OAAAS,OAEbG,EAAAA,EAAUF,EAAAA,EAAAA,IAAAA,CAFd,IAAAG,EAAA,CAnBQC,MAAOxB,EAAOE,WAAWQ,OAAOe,GAAGC,KAyB3CC,YAAA1D,YAAAwD,GACMV,WAAeF,YAAAA,GACfG,iBAAsBD,OAvBpBa,mBAAoB,OAyB5BC,qBAAA5D,YAAAwD,GACAb,KAASC,EAAAA,WAAeH,OAAeoB,GAAAA,YAG3CC,EAAAC,KAAAT,GAEAvB,OAAOO,EAdWa,IAKRL,EAAMH,SAASC,eAAe,aAAaoB,WAAW,MACtDjB,EAAY,IAAIkB,MAAMnB,GAAKoB,KAAKrB,EAAU5C,aAGhD0C,SAASC,eAAe,eAAeiB,UAAYd,EAAUoB,kBA9BrDZ,SAAAA,GACAG,EAAAA,WAAa1D,GACboE,QAAAA,IAAAA,QAAYpE,GAGZ4D,IAAAA,EAAAA,SAAsB5D,eANb,iBAOH+B,SAAOE,eAAqBoC,WAPtCC,UAAAjC,EAAAjB,KAAAmD,iBASAT,EAAaR,UAAbkB,OAAA,eA2BRzC,EAAOO","file":"app.min.js","sourcesContent":["/**\r\n * Certain predefined colors to be used in the chart:\r\n */\r\nconst chartColors = [\r\n    'rgb(255, 99, 132)',\r\n    'rgb(255, 159, 64)',\r\n    'rgb(255, 205, 86)',\r\n    'rgb(75, 192, 192)',\r\n    'rgb(54, 162, 235)',\r\n    'rgb(153, 102, 255)',\r\n    'rgb(201, 203, 207)',\r\n    'rgb(155, 99, 132)',\r\n    'rgb(255, 10, 14)',\r\n    'rgb(234, 205, 1)',\r\n    'rgb(75, 92, 92)',\r\n    'rgb(4, 122, 235)',\r\n    'rgb(100, 142, 3)',\r\n    'rgb(101, 203, 27)'\r\n\r\n];\r\n\r\n\r\n/*\r\n * Line chart settings:\r\n */\r\nconst lineOptions = {\r\n    ///Boolean - Whether grid lines are shown across the chart\r\n    scaleShowGridLines: true,\r\n    //String - Colour of the grid lines\r\n    scaleGridLineColor: \"rgba(0,0,0,.05)\",\r\n    //Number - Width of the grid lines\r\n    scaleGridLineWidth: 1,\r\n    //Boolean - Whether the line is curved between points\r\n    bezierCurve: false,\r\n    //Number - Tension of the bezier curve between points\r\n    bezierCurveTension: 0.4,\r\n    //Boolean - Whether to show a dot for each point\r\n    pointDot: true,\r\n    //Number - Radius of each point dot in pixels\r\n    pointDotRadius: 4,\r\n    //Number - Pixel width of point dot stroke\r\n    pointDotStrokeWidth: 1,\r\n    //Number - amount extra to add to the radius to cater for hit detection outside the drawn point\r\n    pointHitDetectionRadius: 20,\r\n    //Boolean - Whether to show a stroke for datasets\r\n    datasetStroke: true,\r\n    //Number - Pixel width of dataset stroke\r\n    datasetStrokeWidth: 2,\r\n    //Boolean - Whether to fill the dataset with a colour\r\n    datasetFill: false,\r\n    //Boolean - Re-draw chart on page resize\r\n    responsive: true,\r\n    title: {\r\n        display: true,\r\n        text: 'Custom Chart Title'\r\n    }\r\n   \r\n};\r\n\r\n\r\n\r\nconst app = angular.module('testApp', []);\r\napp.constant('serviceBasePath', window.location.origin);\r\n\r\napp.factory('pricesService', ['$http', '$q', 'serviceBasePath', function ($http, $q, serviceBasePath) {\r\n    const fac = {};\r\n\r\n    /**\r\n     * We can fetch the data either from JSON file or from sqlite database.\r\n     * Both urls return the same data format\r\n     */\r\n    const JSON_FILE_URL = \"/api/FetchCheesePrices\";\r\n    const SQLITE_DATABASE_URL = \"/api/FetchCheesePrices_v2\";\r\n\r\n    fac.getCheesePrices = () => {\r\n        const defer = $q.defer();\r\n        $http({\r\n            method: 'GET',\r\n            url: serviceBasePath + SQLITE_DATABASE_URL,\r\n            data: {}\r\n        }).then((response) => {\r\n            defer.resolve(response.data);\r\n        }, (error) =>{\r\n            defer.reject(error);\r\n        })\r\n        return defer.promise;\r\n    };\r\n\r\n    return fac;\r\n}]);\r\n\r\napp.controller('demoController', ['$scope', 'pricesService', function ($scope, pricesService) {\r\n\r\n    $scope.inprocessing = false;\r\n    $scope.cheeseData = { years: [], names: [], prices: [] };\r\n    $scope.dataStatus = \"Loading ...\";\r\n\r\n\r\n\r\n    /*\r\n     * Get the pricaes:\r\n     */\r\n    $scope.getCheesePrices =  () => {\r\n        $scope.dataStatus = \"Loading ...\";\r\n        pricesService.getCheesePrices().then((data) =>{\r\n\r\n            //read the data and if exist, fill the related variables\r\n            if (data && data.cheese_data) {\r\n                $scope.cheeseData.years = data.cheese_data.years;\r\n                if ($scope.cheeseData.years && $scope.cheeseData.years.length > 0) {\r\n                    $scope.dataStatus = \"\";\r\n                    $scope.cheeseData.names = data.cheese_data.names;\r\n                    $scope.cheeseData.prices = data.cheese_data.prices;\r\n                } else {\r\n                    $scope.dataStatus = \"No Data Available\";\r\n                }\r\n            }\r\n            _drawChart();\r\n\r\n        }, (error) => {\r\n            $scope.dataStatus = \"\";\r\n            console.log(\"error\", error)\r\n\r\n            //show errors\r\n            const errDivContainer = document.getElementById('err_container');\r\n            const errDiv = document.getElementById('err_msg');\r\n            errDiv.innerText = error.data.ExceptionMessage;\r\n            errDivContainer.classList.remove(\"collapse\");\r\n            \r\n        })\r\n    };\r\n\r\n\r\n    /**\r\n     * Generate the dataset of the Line Chart:\r\n     */\r\n    function _generateChartDataset() {\r\n        const dataSet = [];\r\n        const arrayLength = $scope.cheeseData.prices.length;\r\n        for (let i = 0; i < arrayLength; i++) {\r\n            const item = {\r\n                label: $scope.cheeseData.prices[i].name,\r\n                strokeColor: chartColors[i],\r\n                pointColor: chartColors[i],\r\n                pointStrokeColor: \"#fff\",\r\n                pointHighlightFill: \"#fff\",\r\n                pointHighlightStroke: chartColors[i],\r\n                data: $scope.cheeseData.prices[i].price_data\r\n            }\r\n            dataSet.push(item);\r\n        }\r\n        return dataSet;\r\n    }\r\n\r\n\r\n    /* \r\n     * LINE CHART\r\n     */\r\n    function _drawChart() {\r\n        // ref: http://www.chartjs.org/docs/#line-chart-introduction\r\n        const lineData = {\r\n            labels: $scope.cheeseData.years,\r\n            datasets: _generateChartDataset()         \r\n        };\r\n\r\n      \r\n        // render chart\r\n        const ctx = document.getElementById(\"lineChart\").getContext(\"2d\");\r\n        const lineChart = new Chart(ctx).Line(lineData, lineOptions);\r\n\r\n        // add legend\r\n        document.getElementById('line-legend').innerHTML = lineChart.generateLegend();\r\n        \r\n    }\r\n    // END LINE CHART\r\n\r\n    $scope.getCheesePrices();\r\n\r\n}]);\r\n"]}