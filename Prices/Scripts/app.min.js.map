{"version":3,"sources":["app.js"],"names":["chartColors","lineOptions","scaleShowGridLines","scaleGridLineColor","scaleGridLineWidth","bezierCurve","bezierCurveTension","pointDot","pointDotRadius","constant","factory","fac","getCheesePrices","$http","url","serviceBasePath","responsive","app","angular","defer","promise","window","location","origin","$q","controller","$scope","inprocessing","cheeseData","dataStatus","then","response","data","pricesService","_drawChart","error","errDivContainer","errDiv","getElementById","lineData","ctx","lineChart","innerText","cheese_data","classList","remove","years","length","names","_generateChartDataset","prices","arrayLength","labels","datasets","item","label","i","name","strokeColor","pointHighlightFill","pointHighlightStroke","document","innerHTML","dataSet","push","getContext","Chart","Line","generateLegend","pointColor","pointStrokeColor","price_data","ExceptionMessage"],"mappings":"aACA,IAAMA,YAAc,CAAdA,oBAEF,oBAgBEC,oBACF,oBACAC,oBACA,qBACAC,qBACA,oBACAC,mBACA,mBACAC,kBACA,mBACAC,mBACA,qBAIAL,YAAA,CAEAC,oBAAA,EAEAC,mBAAA,kBAEAC,mBAAA,EAEAC,aAAA,EAEAC,mBAAA,GAbAC,UAAU,EAEVC,eAAgB,EAkBhBC,oBAAS,EAETC,wBAAyB,GAEzBC,eAAIC,EAEAC,mBAAM,EAEFC,aAAKC,EAFHC,YAIE,GAKRC,IAAAC,QAAOC,OAAMC,UAAb,IACHH,IAAAR,SAZD,kBAAAY,OAAAC,SAAAC,QAcAN,IAAAP,QAAOC,gBAAP,CAAA,QAAA,KAAA,kBAAA,SAAAE,EAAAW,EAAAT,GAhBJ,IAAAJ,EAAA,CAEIA,gBAAsB,WAiBtBc,IAAJN,EAAeK,EAAAL,QAYCO,OA3BRb,EAAM,CAiBHc,OAAAA,MACAC,IAAAA,EAAa,yBACbC,KAAAA,KAfAC,KAAK,SAACC,GAmBNnB,EAAAA,QAAPmB,EAA0BC,OACtBN,SAAAA,GACAO,EAAAA,OAAcrB,KAENc,EAAAA,UAGIA,OAAAA,KAGAA,IAAAA,WAAAA,iBAAOG,CAAAA,SAAa,gBAApB,SAAAH,EAAAO,GAEPP,EAAAC,cAAA,EACDO,EAAAA,WAAAA,CAAAA,MAAAA,GAAAA,MAAAA,GAAAA,OAAAA,IACHR,EAAEG,WAACM,cAIAT,EAAAd,gBAAA,WACAc,EAAAG,WAAMO,cACNH,EAAMI,kBAAkBC,KAAAA,SAAAA,GA2BhC,IAEUC,EAMAC,EACAC,EAnCFJ,GAAOK,EAAPC,cACAP,EAAAA,WAAgBQ,MAAUC,EAAOF,YAAjCG,MApBJpB,EAAAE,WAAAkB,OAAA,EAAApB,EAAAE,WAAAkB,MAAAC,QAFJrB,EAAAG,WAAA,GAOgBH,EAAOE,WAAWoB,MAAQhB,EAAKW,YAAYK,MAqBlDC,EAAAA,WAAwBC,OAAAlB,EAAAW,YAAAO,QAEvBC,EAAczB,WAAOE,qBAmBrBW,EAAW,CACba,OAAQ1B,EAAOE,WAAWoB,MAC1BK,SAHJ,WAGIA,IAFJ,IAAMd,EAAW,GACba,EAAexB,EAAAA,WADFsB,OAAAH,OAEbM,EAAAA,EAAUJ,EAAAA,EAAAA,IAAAA,CAFd,IAAAK,EAAA,CAhBQC,MAAO7B,EAAOE,WAAWsB,OAAOM,GAAGC,KAqB3CC,YAAA1D,YAAAwD,GACMhB,WAAeF,YAAAA,GACfG,iBAAsBD,OAnBpBmB,mBAAoB,OAqB5BC,qBAAA5D,YAAAwD,GACAK,KAASvB,EAAAA,WAAeY,OAAeY,GAAAA,YAG3CC,EAAAC,KAAAV,GAEA5B,OAAOd,EAbWqC,IAIRT,EAAMqB,SAASvB,eAAe,aAAa2B,WAAW,MACtDxB,EAAY,IAAIyB,MAAM1B,GAAK2B,KAAK5B,EAAUtC,aAGhD4D,SAASvB,eAAe,eAAewB,UAAYrB,EAAU2B,kBAzBrDV,SAAAA,GACAW,EAAAA,WAAYrE,GACZsE,QAAAA,IAAAA,QAAAA,GAGAtC,IAAAA,EAAaJ,SAAWsB,eAAUqB,iBAPtCV,SAAAvB,eAAA,WASAyB,UAAA5B,EAAAH,KAAAwC,iBACHpC,EAAAQ,UAAAC,OAAA,eAsBLnB,EAAOd","file":"app.min.js","sourcesContent":["\r\nconst chartColors = [\r\n    'rgb(255, 99, 132)',\r\n    'rgb(255, 159, 64)',\r\n    'rgb(255, 205, 86)',\r\n    'rgb(75, 192, 192)',\r\n    'rgb(54, 162, 235)',\r\n    'rgb(153, 102, 255)',\r\n    'rgb(201, 203, 207)',\r\n    'rgb(155, 99, 132)',\r\n    'rgb(255, 10, 14)',\r\n    'rgb(234, 205, 1)',\r\n    'rgb(75, 92, 92)',\r\n    'rgb(4, 122, 235)',\r\n    'rgb(100, 142, 3)',\r\n    'rgb(101, 203, 27)'\r\n\r\n];\r\n\r\nconst lineOptions = {\r\n    ///Boolean - Whether grid lines are shown across the chart\r\n    scaleShowGridLines: true,\r\n    //String - Colour of the grid lines\r\n    scaleGridLineColor: \"rgba(0,0,0,.05)\",\r\n    //Number - Width of the grid lines\r\n    scaleGridLineWidth: 1,\r\n    //Boolean - Whether the line is curved between points\r\n    bezierCurve: false,\r\n    //Number - Tension of the bezier curve between points\r\n    bezierCurveTension: 0.4,\r\n    //Boolean - Whether to show a dot for each point\r\n    pointDot: true,\r\n    //Number - Radius of each point dot in pixels\r\n    pointDotRadius: 4,\r\n    //Number - Pixel width of point dot stroke\r\n    pointDotStrokeWidth: 1,\r\n    //Number - amount extra to add to the radius to cater for hit detection outside the drawn point\r\n    pointHitDetectionRadius: 20,\r\n    //Boolean - Whether to show a stroke for datasets\r\n    datasetStroke: true,\r\n    //Number - Pixel width of dataset stroke\r\n    datasetStrokeWidth: 2,\r\n    //Boolean - Whether to fill the dataset with a colour\r\n    datasetFill: false,\r\n    //Boolean - Re-draw chart on page resize\r\n    responsive: true,\r\n\r\n};\r\n\r\n\r\nconst app = angular.module('testApp', []);\r\napp.constant('serviceBasePath', window.location.origin);\r\n\r\napp.factory('pricesService', ['$http', '$q', 'serviceBasePath', function ($http, $q, serviceBasePath) {\r\n    const fac = {};\r\n    fac.getCheesePrices = () => {\r\n        const defer = $q.defer();\r\n        $http({\r\n            method: 'GET',\r\n            url: serviceBasePath + \"/api/FetchCheesePrices\",\r\n            data: {}\r\n        }).then((response) => {\r\n            defer.resolve(response.data);\r\n        }, (error) =>{\r\n            defer.reject(error);\r\n        })\r\n        return defer.promise;\r\n    };\r\n\r\n    return fac;\r\n}]);\r\n\r\napp.controller('demoController', ['$scope', 'pricesService', function ($scope, pricesService) {\r\n\r\n    $scope.inprocessing = false;\r\n    $scope.cheeseData = { years: [], names: [], prices: [] };\r\n    $scope.dataStatus = \"Loading ...\";\r\n\r\n\r\n\r\n    $scope.getCheesePrices =  () => {\r\n        $scope.dataStatus = \"Loading ...\";\r\n        pricesService.getCheesePrices().then((data) =>{\r\n            if (data && data.cheese_data) {\r\n                $scope.cheeseData.years = data.cheese_data.years;\r\n                if ($scope.cheeseData.years && $scope.cheeseData.years.length > 0) {\r\n                    $scope.dataStatus = \"\";\r\n                    $scope.cheeseData.names = data.cheese_data.names;\r\n                    $scope.cheeseData.prices = data.cheese_data.prices;\r\n                } else {\r\n                    $scope.dataStatus = \"No Data Available\";\r\n                }\r\n            }\r\n            _drawChart();\r\n        }, (error) => {\r\n            $scope.dataStatus = \"\";\r\n            console.log(\"error\", error)\r\n\r\n            //show the error\r\n            const errDivContainer = document.getElementById('err_container');\r\n            const errDiv = document.getElementById('err_msg');\r\n            errDiv.innerText = error.data.ExceptionMessage;\r\n            errDivContainer.classList.remove(\"collapse\");\r\n            \r\n        })\r\n    };\r\n\r\n\r\n    function _generateChartDataset() {\r\n        const dataSet = [];\r\n        const arrayLength = $scope.cheeseData.prices.length;\r\n        for (let i = 0; i < arrayLength; i++) {\r\n            const item = {\r\n                label: $scope.cheeseData.prices[i].name,\r\n                strokeColor: chartColors[i],\r\n                pointColor: chartColors[i],\r\n                pointStrokeColor: \"#fff\",\r\n                pointHighlightFill: \"#fff\",\r\n                pointHighlightStroke: chartColors[i],\r\n                data: $scope.cheeseData.prices[i].price_data\r\n            }\r\n            dataSet.push(item);\r\n        }\r\n        return dataSet;\r\n    }\r\n\r\n    // LINE CHART\r\n    function _drawChart() {\r\n        // ref: http://www.chartjs.org/docs/#line-chart-introduction\r\n        const lineData = {\r\n            labels: $scope.cheeseData.names,\r\n            datasets: _generateChartDataset()\r\n        };\r\n\r\n        // render chart\r\n        const ctx = document.getElementById(\"lineChart\").getContext(\"2d\");\r\n        const lineChart = new Chart(ctx).Line(lineData, lineOptions);\r\n\r\n        // add legend\r\n        document.getElementById('line-legend').innerHTML = lineChart.generateLegend();\r\n        \r\n    }\r\n    // END LINE CHART\r\n\r\n    $scope.getCheesePrices();\r\n\r\n}]);\r\n"]}